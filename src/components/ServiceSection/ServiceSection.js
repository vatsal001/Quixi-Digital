import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { gsap, Power2 } from 'gsap';
import Services from "../../api/Services";

const ServiceSection = (props) => {

    const ClickHandler = () => {
        window.scrollTo(10, 0);
    }

    const [activeItem, setActiveItem] = useState(null);

    const handleHover = (sitem) => {
        setActiveItem(sitem);
    };

    useEffect(() => {
        const allBtns = gsap.utils.toArray(".btn-wrapper");
        const allBtnCircles = gsap.utils.toArray(".btn-move");

        if (allBtns.length > 0) {
            allBtns.forEach((btn, i) => {
                const btnElement = btn;
                const btnCircle = allBtnCircles[i];

                const callParallax = (e) => parallaxIt(e, btnCircle, 80);

                const parallaxIt = (e, target, movement) => {
                    const rect = btnElement.getBoundingClientRect();
                    const relX = e.clientX - rect.left;
                    const relY = e.clientY - rect.top;

                    gsap.to(target, 0.5, {
                        x: ((relX - rect.width / 2) / rect.width) * movement,
                        y: ((relY - rect.height / 2) / rect.height) * movement,
                        ease: Power2.easeOut,
                    });
                };

                btnElement.addEventListener('mousemove', callParallax);
                btnElement.addEventListener('mouseleave', () => {
                    gsap.to(btnCircle, 0.5, {
                        x: 0,
                        y: 0,
                        ease: Power2.easeOut,
                    });
                });

                return () => {
                    btnElement.removeEventListener('mousemove', callParallax);
                };
            });
        }
    }, []);



    return (
        <section className={"" + props.hclass}>
            <div className="container">
                <div className="title scroll-text-animation" data-animation="fade_from_right">
                    <h3>our <span>Services</span></h3>
                </div>
                <div className="row g-0">
                    {Services.slice(0, 6).map((service, index) => (
                        <div className="col-lg-6 col-12 scroll-text-animation" data-animation="fade_from_bottom" key={service.id || index}>
                            <div className={`service-card ${activeItem === service ? 'active' : ' item'}`}
                                onMouseEnter={() => handleHover(service)}>
                                <div className="text">
                                    <span>{service.Subtitle}</span>
                                    <h2><Link onClick={ClickHandler} to={`/service-single/${service.slug}`}>{service.title}</Link></h2>
                                </div>
                                <Link onClick={ClickHandler} to={`/service-single/${service.slug}`} className="icon">
                                    <i className="ti-arrow-top-right"></i>
                                </Link>
                                {/* <div className="image">
                                    <img src={service.sImg} alt="" />
                                </div> */}
                            </div>
                        </div>
                    ))
                    }
                </div>
                <Link onClick={ClickHandler} to="/service" className="service-all btn-wrapper btn-move scroll-text-animation" data-animation="fade_from_bottom">More
                    <br />
                    Service
                    <div className="shape">
                        <svg width="196" height="196" viewBox="0 0 196 196" fill="none">
                            <path
                                d="M191.473 106.074L183.461 111C182.391 111.646 181.461 112.509 180.727 113.536C179.994 114.563 179.473 115.733 179.197 116.973C178.92 118.212 178.894 119.497 179.119 120.749C179.344 121.999 179.816 123.191 180.506 124.249L185.624 132.228C186.519 133.583 187.05 135.155 187.165 136.785C187.282 138.416 186.978 140.049 186.284 141.523C185.591 142.996 184.532 144.257 183.214 145.181C181.895 146.104 180.363 146.658 178.77 146.787L169.495 147.644C168.255 147.75 167.049 148.114 165.952 148.714C164.855 149.314 163.889 150.136 163.113 151.131C162.337 152.127 161.768 153.273 161.44 154.502C161.114 155.729 161.035 157.013 161.209 158.274L162.442 167.735C162.675 169.352 162.489 171.004 161.904 172.525C161.318 174.046 160.353 175.384 159.105 176.404C157.856 177.424 156.369 178.092 154.789 178.34C153.21 178.589 151.595 178.409 150.105 177.819L141.348 174.484C140.187 174.032 138.949 173.827 137.708 173.88C136.467 173.935 135.25 174.247 134.131 174.798C133.012 175.349 132.014 176.129 131.199 177.087C130.384 178.046 129.769 179.166 129.392 180.376L126.482 189.447C126.004 191.006 125.136 192.408 123.964 193.517C122.791 194.625 121.356 195.4 119.8 195.765C118.244 196.129 116.622 196.069 115.096 195.593C113.569 195.116 112.191 194.239 111.098 193.047L104.641 186.158C103.787 185.234 102.757 184.498 101.615 183.994C100.474 183.49 99.2431 183.231 98 183.231C96.7569 183.231 95.5264 183.49 94.3849 183.994C93.2434 184.498 92.2135 185.234 91.3587 186.158L84.9011 193.047C83.809 194.239 82.4311 195.116 80.9045 195.593C79.3779 196.069 77.7561 196.129 76.2002 195.765C74.6443 195.4 73.2085 194.625 72.0362 193.517C70.8639 192.408 69.9958 191.006 69.518 189.447L66.6087 180.376C66.2305 179.166 65.6153 178.046 64.8003 177.087C63.9855 176.129 62.988 175.349 61.869 174.798C60.7501 174.247 59.533 173.935 58.2922 173.88C57.0514 173.827 55.8132 174.032 54.6525 174.484L45.8947 177.819C44.4046 178.409 42.7895 178.589 41.2105 178.34C39.6314 178.092 38.1434 177.424 36.8951 176.404C35.6469 175.384 34.6818 174.046 34.0962 172.525C33.5106 171.004 33.3247 169.352 33.5574 167.735L34.7912 158.274C34.9655 157.013 34.8866 155.729 34.5592 154.502C34.2317 153.273 33.6626 152.127 32.8869 151.131C32.1112 150.136 31.1451 149.314 30.0478 148.714C28.9506 148.114 27.7453 147.75 26.5056 147.644L17.2298 146.77C15.6369 146.642 14.1049 146.089 12.7865 145.165C11.468 144.241 10.4092 142.98 9.7157 141.507C9.02222 140.034 8.71824 138.4 8.83408 136.77C8.94991 135.139 9.48141 133.568 10.3757 132.213L15.4935 124.249C16.184 123.191 16.656 121.999 16.8813 120.749C17.1066 119.497 17.0802 118.212 16.8036 116.973C16.527 115.733 16.006 114.563 15.2727 113.536C14.5393 112.509 13.6089 111.646 12.5385 111L4.52692 106.074C3.14917 105.249 2.00646 104.071 1.21223 102.654C0.418013 101.238 0 99.6333 0 98C0 96.3667 0.418013 94.7624 1.21223 93.3459C2.00646 91.9294 3.14917 90.7507 4.52692 89.9262L12.5385 85.0006C13.6089 84.354 14.5393 83.4909 15.2727 82.4639C16.006 81.4368 16.527 80.2674 16.8036 79.0273C17.0802 77.7871 17.1066 76.5026 16.8813 75.2516C16.656 74.0007 16.184 72.8096 15.4935 71.7519L10.3757 63.7717C9.48141 62.4167 8.94991 60.8456 8.83408 59.2148C8.71824 57.584 9.02222 55.9506 9.7157 54.4775C10.4092 53.0044 11.468 51.743 12.7865 50.8193C14.1049 49.8958 15.6369 49.3422 17.2298 49.2135L26.5056 48.3562C27.7453 48.2499 28.9506 47.8859 30.0478 47.2861C31.1451 46.6864 32.1112 45.8638 32.8869 44.8686C33.6626 43.8733 34.2317 42.7267 34.5592 41.4986C34.8866 40.2704 34.9655 38.9868 34.7912 37.7264L33.5574 28.2651C33.3247 26.6476 33.5106 24.996 34.0962 23.4749C34.6818 21.9538 35.6469 20.6165 36.8951 19.5961C38.1434 18.5758 39.6314 17.908 41.2105 17.6596C42.7895 17.4112 44.4046 17.5909 45.8947 18.1805L54.6525 21.5159C55.8132 21.9681 57.0514 22.1738 58.2922 22.1199C59.533 22.0659 60.7501 21.7534 61.869 21.202C62.988 20.6506 63.9855 19.8717 64.8003 18.9127C65.6153 17.9537 66.2305 16.8347 66.6087 15.6241L69.518 6.55291C69.9958 4.99447 70.8639 3.59106 72.0362 2.48272C73.2085 1.37437 74.6443 0.599441 76.2002 0.235279C77.7561 -0.128882 79.3779 -0.0693745 80.9045 0.407281C82.4311 0.883936 83.809 1.7613 84.9011 2.9523L91.3587 9.84147C92.2135 10.766 93.2434 11.5027 94.3849 12.006C95.5264 12.5093 96.7569 12.7689 98 12.7689C99.2431 12.7689 100.474 12.5093 101.615 12.006C102.757 11.5027 103.787 10.766 104.641 9.84147L111.098 2.9523C112.191 1.7613 113.569 0.883936 115.096 0.407281C116.622 -0.0693745 118.244 -0.128882 119.8 0.235279C121.356 0.599441 122.791 1.37437 123.964 2.48272C125.136 3.59106 126.004 4.99447 126.482 6.55291L129.392 15.6241C129.769 16.8347 130.384 17.9537 131.199 18.9127C132.014 19.8717 133.012 20.6506 134.131 21.202C135.25 21.7534 136.467 22.0659 137.708 22.1199C138.949 22.1738 140.187 21.9681 141.348 21.5159L150.105 18.1805C151.595 17.5909 153.21 17.4112 154.789 17.6596C156.369 17.908 157.856 18.5758 159.105 19.5961C160.353 20.6165 161.318 21.9538 161.904 23.4749C162.489 24.996 162.675 26.6476 162.442 28.2651L161.209 37.7264C161.035 38.9868 161.114 40.2704 161.44 41.4986C161.768 42.7267 162.337 43.8733 163.113 44.8686C163.889 45.8638 164.855 46.6864 165.952 47.2861C167.049 47.8859 168.255 48.2499 169.495 48.3562L178.77 49.2291C180.363 49.3577 181.895 49.9114 183.214 50.835C184.532 51.7586 185.591 53.02 186.284 54.4931C186.978 55.9661 187.282 57.5996 187.165 59.2304C187.05 60.8612 186.519 62.4324 185.624 63.7873L180.506 71.7519C179.816 72.8096 179.344 74.0007 179.119 75.2516C178.894 76.5026 178.92 77.7871 179.197 79.0273C179.473 80.2674 179.994 81.4368 180.727 82.4639C181.461 83.4909 182.391 84.354 183.461 85.0006L191.473 89.9262C192.85 90.7507 193.994 91.9294 194.788 93.3459C195.582 94.7624 196 96.3667 196 98C196 99.6333 195.582 101.238 194.788 102.654C193.994 104.071 192.85 105.249 191.473 106.074Z"
                                fill="#BAE900" />
                        </svg>
                    </div>
                </Link>
            </div>
            <div className="bg-shape">
                <svg width="1920" height="1435" viewBox="0 0 1920 1435" fill="none">
                    <g filter="url(#filter0_f_1_121)">
                        <ellipse cx="984.937" cy="717.486" rx="906.755" ry="83.9948"
                            transform="rotate(23.3308 984.937 717.486)" fill="#FD5B38" fillOpacity="0.21" />
                    </g>
                    <defs>
                        <filter id="filter0_f_1_121" x="-198.352" y="0.110352" width="2366.58" height="1434.75"
                            filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
                            <feFlood floodOpacity="0" result="BackgroundImageFix" />
                            <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape" />
                            <feGaussianBlur stdDeviation="175" result="effect1_foregroundBlur_1_121" />
                        </filter>
                    </defs>
                </svg>
            </div>
        </section>
    );
}

export default ServiceSection;

